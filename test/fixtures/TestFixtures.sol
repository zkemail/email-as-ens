// SPDX-License-Identifier: MIT
pragma solidity ^0.8.29;

import { ProveAndClaimCommand } from "../../src/utils/Verifier.sol";

library TestFixtures {
    function claimEnsCommand() internal pure returns (ProveAndClaimCommand memory) {
        uint256[17] memory pubkey = [
            uint256(2_107_195_391_459_410_975_264_579_855_291_297_887),
            uint256(2_562_632_063_603_354_817_278_035_230_349_645_235),
            uint256(1_868_388_447_387_859_563_289_339_873_373_526_818),
            uint256(2_159_353_473_203_648_408_714_805_618_210_333_973),
            uint256(351_789_365_378_952_303_483_249_084_740_952_389),
            uint256(659_717_315_519_250_910_761_248_850_885_776_286),
            uint256(1_321_773_785_542_335_225_811_636_767_147_612_036),
            uint256(258_646_249_156_909_342_262_859_240_016_844_424),
            uint256(644_872_192_691_135_519_287_736_182_201_377_504),
            uint256(174_898_460_680_981_733_302_111_356_557_122_107),
            uint256(1_068_744_134_187_917_319_695_255_728_151_595_132),
            uint256(1_870_792_114_609_696_396_265_442_109_963_534_232),
            uint256(8_288_818_605_536_063_568_933_922_407_756_344),
            uint256(1_446_710_439_657_393_605_686_016_190_803_199_177),
            uint256(2_256_068_140_678_002_554_491_951_090_436_701_670),
            uint256(518_946_826_903_468_667_178_458_656_376_730_744),
            uint256(3_222_036_726_675_473_160_989_497_427_257_757)
        ];

        uint256[2] memory pA = [
            20_888_331_054_696_098_445_606_945_549_799_161_626_823_615_582_591_148_740_779_671_056_217_073_912_228,
            984_380_168_381_528_842_280_944_629_777_675_221_677_141_166_035_897_415_391_226_995_592_930_191_653
        ];
        uint256[2][2] memory pB = [
            [
                3_060_263_515_482_713_323_694_380_562_319_705_383_842_381_804_415_194_592_591_798_322_590_364_742_585,
                848_855_232_225_413_411_791_392_616_764_867_132_306_661_210_526_401_022_919_110_205_998_108_879_948
            ],
            [
                17_520_756_712_347_438_577_665_637_729_248_066_520_825_824_644_164_786_627_490_235_197_763_053_870_579,
                18_757_306_694_312_710_148_633_096_589_556_278_814_493_019_652_852_439_484_311_900_134_038_057_678_222
            ]
        ];
        uint256[2] memory pC = [
            16_772_734_460_455_887_897_132_027_870_106_533_301_366_566_064_790_590_768_378_437_095_535_419_637_164,
            5_813_240_226_664_314_141_787_611_707_024_720_515_353_583_762_069_698_264_261_689_727_748_096_466_051
        ];

        ProveAndClaimCommand memory command = ProveAndClaimCommand({
            domain: "gmail.com",
            email: "thezdev3@gmail.com",
            owner: 0xafBD210c60dD651892a61804A989eEF7bD63CBA0,
            dkimSignerHash: hex"0ea9c777dc7110e5a9e89b13f0cfc540e3845ba120b2b6dc24024d61488d4788",
            nullifier: hex"0A11F2664AE4F7E3A9C3BA43394B01347FD5B76FC0A7FDB09D91324DA1F6ADA4",
            timestamp: 0,
            accountSalt: hex"0E49D406A4D84DA7DB65C161EB11D06E8C52F1C0EDD91BC557E4F23FF01D7F66",
            isCodeEmbedded: false,
            miscellaneousData: abi.encode(pubkey),
            proof: abi.encode(pA, pB, pC)
        });

        return command;
    }
}
